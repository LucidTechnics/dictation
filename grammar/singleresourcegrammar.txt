{
  var not = false;

  function Resource(n) {
    /*
    this.resource = null;       // A/An Capitalized Word
    this.abstract = null;       // A/An Resource is abstract
    this.alias = null;          // Alias Resource
    this.audited = null;        // A Resource is audited
    this.mappingfrom = null;    // A Resource maps from Resource1 to Resource2
    this.mappingto = null;      // A Resource maps from Resource1 to Resource2
    */
    this.haspropertiesof = [];  // A Resource has properties of Another Resource and Third Resource
    this.attributes = [];
    this.canbe = [];
    this.maps = [];		// where thing1 and thing2 map(s) to thing2
  }

  function Attribute() {
    /*
    this.name = null;            // has a/an attribute name
    this.properties = null;      // has a name which ... 
    this.quant = null;           // a/an/one/many
    this.resource = null;        // has one/many Resource Name
    */
  }

  function Property (){
     /*
     this.collection = null;           // has an attribute which has a list/set/map   
     this.collectiontotype = null;     // list/set of Resource Name / integer /double...
     this.collectiontype = null;       // map of string to integer
     this.encrypted = null;            // which is encrypted
     this.equal = null;                // which is equal to something
     this.greaterthan = null;          // which is greater/bigger than/then something
     this.greaterthanorequal = null;   // which is greater than ore equal to something
     this.hidden = null;               // which is hidden
     this.indexable = null;            // which is indexable
     this.label = null;                // which has label "something"  OR which has label something
     this.lessthan = null;             // which is smaller/less than/then something
     this.lessthanorequal = null;      // which is smaller than or equal to something
     this.maxlength = null;            // which has maximum/max length
     this.minlength =  null;           // which has minimum/min length
     this.notequal = null;             // which is not equal to something
     this.propertygroup = null;        // which has property group something OR "something"
     this.readonly = null;             // which is read only
     this.required = null;             // which is required
     this.searchable = null;           // which is searchable
     this.sensitive = null;            // which is sensitive
     this.type = null;                 // which has type Resource Name / integer / double...
     this.widget = null;               // which has a widget something
     this.allowedvalues = [];          // which ahs allowed values "thing1, thing2, thing3"
     this.has = null; // special magic has... "which has crashingtime attributename"
   */
  }

  function Map () {
    /*
    this.from = [];
    this.to = [];
    */
  } 

  function CanBe() {
     /*
     this.by = [];           // can be collected/created... by person1 or person2 and person3
     this.collected = null;  // can be collected
     this.created = null;    // can be created
     this.deleted = null;    // can be deleted
     this.updated = null;    // can be updated
     this.viewed = null;     // can be viewed
     */
  }

  var maps = new Map();
  var res = new Resource();
  var attr = new Attribute();
  var prop = new Property();
  var can = new CanBe();
}

start
 = define
   {return res;}

define
 = ana (resourcedef / mappingdef) 

resourcedef
 = resource attribute* (EOL*/EOF) 

mappingdef
 = resourcemap where* (EOL*/EOF)

resourcemap
 = rn:resname+ "maps" ws+ ("from" ws+)? (("a"/"an") ws+)? rn1:resname+ "to" ws+ (("a"/"an") ws+)? rn2:resname+ (EOL+/EOF)
   {res.resource = rn.join(" "); res.mappingfrom = rn1.join(" "); res.mappingto = rn2.join(" "); }

resource //"A New Resource Definition (i.e. 'A Resource Name...')"
 = (resourcedefinition / alias) (EOL+/EOF)

resourcedefinition
 = (rn:resname+ resproperties?)
   {res.resource = rn.join(" ");} 

ana 
 = ("An"/"A") ws+

resname "Resource Name"
 = l1:[A-Z] l2:[a-z]+ l3:ws* 
   {return (l1+l2.join("")).trim();}

//resproperties
// = abstract haspropertiesof+
// = audited haspropertiesof+
// = audited islikea

resproperties
 = (abstract / audited / haspropertiesof / islikea)

//resproperties2
// = "and" ws+ (abstract / audited / haspropertiesof / islikea)

abstract
 = "is" ws+ "abstract" ws* haspropertiesof2*
   {res.abstract = 'abstract';}

abstract2
 = "and" ws+ "is" ws+ "abstract" ws*
   {res.abstract = 'abstract';}

audited
 = "is" ws+ "audited" ws* islikeahaspropertiesof?
   {res.audited = 'audited';}

audited2
 = "and" ws+ "is" ws+ "audited" ws*
   {res.audited = 'audited';}

haspropertiesof
 = "has" ws+ "properties" ws+ ("of"/"from") ws+ resprop haspropertiesof2* abstractaudited?

haspropertiesof2
 = "and" ws+ "has" ws+ "properties" ws+ ("of"/"from") ws+ resprop 
 
islikea
 = "is" ws+ "like" ws+ resalias audited2?

islikea2
 = "and" ws+ "is" ws+ "like" ws+ resalias

resalias
 = ("an"/"a"/"one"/"many") ws+ rp:resname+ ws*
   {res.alias = rp.join(" ");}

islikeahaspropertiesof
 = islikea2 / haspropertiesof2*

abstractaudited
 = (abstract2 / audited2) haspropertiesof2*

//isamapping
// = rn:resname+ "is" ws+ ("a" ws+ "mapping") ws+ ("of"/"from") ws+ rn1:resname+ "to" ws+ rn2:resname+ ws* (EOL*/EOF)
//   {res.resource = rn.join(" "); res.mappingfrom = rn1.join(""); res.mappingto = rn2.join("");}

where
 = "where" ws+ mapfrom ("maps"/"map") ws+ "to" ws+ mapsto (EOL+/EOF)
   {res.maps.push(maps);  maps = new Map();}

mapfrom
 = m1:mapfrom1 m2:mapfrom2*
   {m2.push(m1);  maps.from = m2;}

mapfrom1 "attribute"
 = l1:[a-z] name:(tmp:(!("and"/"maps"/"map") .) {return tmp[1];})*
   {return (l1+name.join("")).trim();}

mapfrom2
 = "and" ws+ a1:mapfrom1
   {return a1;}

mapsto
 = m1:mapsto1 ws*
   {maps.to = m1;}

mapsto1 "attribute"
 = l1:[a-z] name:(tmp:(!(ws* "\n") .) {return tmp[1];})*
   {return (l1+name.join("")).trim();}

resprop
 = ("an"/"a"/"one"/"many") ws+ rp:resname+ ws*
   {res.haspropertiesof.push(rp.join(" "));}

attribute
 = (hasbelongproperties / can)  (EOL+/EOF)

hasbelongproperties
 = ((has properties?) / (belong belongproperties?))
   {attr.properties = prop; res.attributes.push(attr); attr = new Attribute(); prop = new Property();}

has
 = 'has' ws+ (hasatt / hasres)

hasatt
 = quant:('an attribute'/'attribute'/'an'/'a') ws+ attn:(attname / getquotename) ws*
   {attr.quant = quant;  attr.name = attn;}

hasres
 = quant:('one'/'many') ws+ rn:resname+ ws*
   {attr.quant = quant; attr.resource = rn;}

attname "attribute name"
 = l1:[a-z] name:(tmp:(!(ws* ("which"/EOL/EOF)) .) {return tmp[1];})*
   {return (l1+name.join("")).trim();}

properties
 = "which" ws+ which which2*

belongproperties
 = "which" ws+ belongwhich belongwhich2*
  
which
 = (whichhasallowedvalues / whichhaslabel / whichhasregex / whichis /
    whichhaspropertygroup / whichhasmaxlength / whichhasminlength / whichhaswidget / 
    whichhascollection / whichhastype / whichhas)

which2
 = ("and"/"or") ws+ (whichhasallowedvalues / whichhaslabel / whichhasregex / whichis /
    whichhaspropertygroup / whichhasmaxlength / whichhasminlength / whichhaswidget / 
    whichhascollection / whichhastype / whichhas)
  
belongwhich
 = (whichhaslabel / belongwhichis / whichhaspropertygroup) 

belongwhich2
 = ("and"/"or") ws+ (whichhaslabel / belongwhichis / whichhaspropertygroup)

whichhasallowedvalues
 = "has" ws+ "allowed" ws+ "values" ws+ name:allowedvals
   {prop.allowedvalues = name;}

allowedvals 'allowed values with format "val1, val2... '
 = "\"" ws* vals:allowedval+ "\"" ws*
   {return vals;} 

allowedval
 = val:[^","]+ ws* (",")? ws*
   {return (val.join("")).trim();}

whichhaslabel
 = "has" ws+ "label" ws+ name:(getquotename / whichvalue)
    {prop.label = name;}

whichhastype
 = "has" ws+ "type" ws+ name:(('whole' ws+ 'number')/'integer'/'int'/'float'/'double'/('real' ws+ 'number')/('decimal' ws+ 'number')/'date'/'text'/'address'/'email'/'phone' ws+ 'number'/'longitude'/'latitude'/'position'/('time' ws* 'stamp')/'string'/'boolean'/('big' ws+ 'number')/('small' ws+ 'number')/'bytes'/'char') ws*
   {prop.type = name;}

whichhasregex
 = "has" ws+ "regex" ws+ "format" ws+ name:getquotename
   {prop.regexformat = name;}

whichhasmaxlength
 = "has" ws+ ("maximum"/"max") ws+ "length" ws+ name:whichvalue
   {prop.maxlength = name;}

whichhasminlength
 = "has" ws+ ("minimum"/"min") ws+ "length" ws+ name:whichvalue
   {prop.minlength = name;}

whichhaswidget
 = "has" ws+ "widget" ws+ name:whichvalue
   {prop.widget = name;}

whichhascollection
 = "has" ws+ "type" ws+ (list / set / map)

list
 = "list" ws+ "of" ws+ type:whichvalue
   {prop.collection = 'list'; prop.collectiontype = type;}

set
 = "set" ws+ "of" ws+ type:whichvalue
   {prop.collection = 'set'; prop.collectiontype = type;}

map
 = "map" ws+ "of" ws+ type:whichmapvalue "to" ws+ totype:whichvalue 
   {prop.collection = 'map'; prop.collectiontype = type; prop.collectiontotype = totype;}

whichhas
 = "has" "crashingtime" ws+ name:whichvalue
   {prop.has = name;}

whichhaspropertygroup
 = "has" ws+ "property" ws+ "group" ws+ rn:(getquotename / whichvalue)
   {prop.propertygroup = rn;}

getquotename '"name in quotes"'
 = "\"" rn:[^\"]+ "\"" ws*
   {return (rn.join("")).trim();}

whichvalue 'property'
 = l1:[^' '] name:(tmp:(!(("and" ws+)/EOL/EOF) .) {return tmp[1];})*
   {return (l1+name.join("")).trim();}

whichmapvalue
 = name:(tmp:(!(ws+ "to") .) {return tmp[1];})* ws+
   {return (name.join("")).trim();}

whichis
 = "is" ws+ not 
   (indexable/required/sensitive/encrypted/
    greaterthanorequal/greaterthan/lessthanorequal/lessthan/equal/
    searchable/readonly/hidden)
   {not = false;}

belongwhichis
 = "is" ws+ not 
   (indexable/required/searchable)
   {not = false;}

not
 = n:("not")? ws*
   {if (n != null) {not = true;}}

indexable
 = "indexable" ws*
   {if(not) {prop.indexable = 'not indexable';} else {prop.indexable ='indexable';}}

required
 = "required" ws*
   {if(not) {prop.required = 'not required';} else {prop.required = 'required';}}

sensitive
 = "sensitive" ws*
   {if(not) {prop.sensitive = 'not sensitive';} else {prop.sensitive = 'sensitive';}}

encrypted
 = "encrypted" ws*
   {if(not) {prop.encrypted = 'not encrypted';} else {prop.encrypted = 'encrypted';}}

greaterthanorequal
 = ("greater"/"bigger") ws+ ("than") ws+ "or" ws+ "equal" ws+ "to" ws+ num:whichvalue ws*
   {if(not) {prop.lessthanorequal = num;} else {prop.greaterthanorequal = num;}}

greaterthan
 = ("greater"/"bigger") ws+ ("than") ws+ num:whichvalue ws*
   {if(not) {prop.lessthan = num;} else {prop.greaterthan = num;}}

lessthanorequal
 = ("less"/"smaller") ws+ ("than") ws+ "or" ws+ "equal" ws+ "to" ws+ num:whichvalue ws*
   {if(not) {prop.greaterthanorequal = num;} else {prop.lessthanorequal = num;}}

lessthan
 = ("less"/"smaller") ws+ ("than") ws+ num:whichvalue ws*
   {if(not) {prop.greaterthan = num;} else {prop.lessthan = num;}}

equal
 = ("equal") ws+ "to" ws+ num:whichvalue
   {if(not) {prop.notequal = num;} else {prop.equal = num;}}

searchable
 = "searchable" ws*
    {if(not) {prop.searchable = 'not searchable';} else {prop.searchable = 'searchable';}}

readonly
 = "read" ws+ "only" ws*
    {if(not) {prop.readonly = 'not readonly';} else {prop.readonly = 'readonly';}}

hidden
 = "hidden" ws*
    {if(not) {prop.hidden = 'not hidden';} else {prop.hidden = 'hidden';}}

can
 = "can" ws+ "be" ws+ cans by
   {res.canbe.push(can);  can = new CanBe();}

cans
 = (viewed / created / updated / collected / deleted) cans2*
   {can.by = [];}

cans2
 = ("and"/"or") ws+ (viewed / created / updated / collected / deleted)
   
viewed
 = "viewed" ws*
    {can.viewed = 'viewed';}

created
 = "created" ws*
    {can.created = 'created';}

updated
 = "updated" ws*
    {can.updated = 'updated';}

collected
 = "collected" ws*
    {can.collected = 'collected';}

deleted
 = "deleted" ws*
    {can.deleted = 'deleted';}

by
 ="by" ws+ byname:byvalue by2*
   {can.by.push(byname);}

by2
 = ("and"/"or") ws+ byname:byvalue
   {can.by.push(byname);}

byvalue 'permissions'
 = l1:[^' '] name:(tmp:(!(   (ws+ ("and"/"or"))   /EOL/EOF) .) {return tmp[1];})* ws*
   {return (l1+name.join("")).trim();}

belong
 = "belongs" ws+ "to" ws+ quant:("one"/"many") ws+ rn:resname+ ws*
   {attr.quant = quant; attr.resource = rn.join(" ");}

alias
 = "Alias" ws+ rn:resname+ "is" ws+ ("an"/"a") ws+ an:resname+
   {res.resource = rn.join(" "); res.alias = an.join(" ");}

number
 = num:[0-9]+
   {return num.join("").trim();}

ws "'white space'"
 = (' ' / '\t')

EOL ""
 = (comment+ / '\n') ws*

comment ""
 = '//' (!("\n"/EOF) .)* ("\n")? 

EOF "End of File"
 = !.





