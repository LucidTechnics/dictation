  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "define": parse_define,
        "describe": parse_describe,
        "separator": parse_separator,
        "space": parse_space,
        "comment": parse_comment,
        "char": parse_char,
        "capitalChar": parse_capitalChar,
        "word": parse_word,
        "wordAndSeparator": parse_wordAndSeparator,
        "resourceNameWord": parse_resourceNameWord,
        "resourceNameWordAndSeparator": parse_resourceNameWordAndSeparator,
        "defineName": parse_defineName,
        "hasName": parse_hasName,
        "hasNameString": parse_hasNameString,
        "hasDes": parse_hasDes,
        "hasDesString": parse_hasDesString,
        "spaceAndHasDesString": parse_spaceAndHasDesString,
        "hasDescrib": parse_hasDescrib,
        "defineHas": parse_defineHas,
        "canAuth": parse_canAuth,
        "canName": parse_canName,
        "canNameString": parse_canNameString,
        "canOperation": parse_canOperation,
        "defineCan": parse_defineCan,
        "hasPropertyName": parse_hasPropertyName,
        "hasPropertyNameAndSpace": parse_hasPropertyNameAndSpace,
        "hasPropertyNameString": parse_hasPropertyNameString,
        "defineHasProperty": parse_defineHasProperty,
        "defineBelong": parse_defineBelong
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1;
        
        result1 = parse_define();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_define();
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_define() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_defineName();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 10) {
            result1 = "\n";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\n\"");
            }
          }
          if (result1 === null) {
            if (input.substr(pos, 5) === " and ") {
              result1 = " and ";
              pos += 5;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\" and \"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos) === 32) {
                result1 = " ";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\" \"");
                }
              }
            }
          }
          if (result1 !== null) {
            result2 = [];
            pos2 = pos;
            result3 = parse_describe();
            if (result3 !== null) {
              result4 = [];
              if (input.charCodeAt(pos) === 10) {
                result5 = "\n";
                pos++;
              } else {
                result5 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\n\"");
                }
              }
              while (result5 !== null) {
                result4.push(result5);
                if (input.charCodeAt(pos) === 10) {
                  result5 = "\n";
                  pos++;
                } else {
                  result5 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\n\"");
                  }
                }
              }
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos2;
              }
            } else {
              result3 = null;
              pos = pos2;
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = pos;
              result3 = parse_describe();
              if (result3 !== null) {
                result4 = [];
                if (input.charCodeAt(pos) === 10) {
                  result5 = "\n";
                  pos++;
                } else {
                  result5 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\n\"");
                  }
                }
                while (result5 !== null) {
                  result4.push(result5);
                  if (input.charCodeAt(pos) === 10) {
                    result5 = "\n";
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"\\n\"");
                    }
                  }
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, m1, m2) {return {name:m1,describe:m2}})(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_describe() {
        var result0;
        
        result0 = parse_defineHasProperty();
        if (result0 === null) {
          result0 = parse_defineHas();
          if (result0 === null) {
            result0 = parse_defineCan();
            if (result0 === null) {
              result0 = parse_defineBelong();
              if (result0 === null) {
                result0 = parse_comment();
              }
            }
          }
        }
        return result0;
      }
      
      function parse_separator() {
        var result0;
        
        result0 = parse_space();
        if (result0 === null) {
          result0 = parse_comment();
          if (result0 === null) {
            result0 = "";
          }
        }
        return result0;
      }
      
      function parse_space() {
        var result0;
        
        if (input.charCodeAt(pos) === 32) {
          result0 = " ";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        if (result0 === null) {
          result0 = parse_comment();
        }
        return result0;
      }
      
      function parse_comment() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "//") {
          result0 = "//";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"//\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_char();
          if (result2 === null) {
            if (input.charCodeAt(pos) === 32) {
              result2 = " ";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\" \"");
              }
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_char();
            if (result2 === null) {
              if (input.charCodeAt(pos) === 32) {
                result2 = " ";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\" \"");
                }
              }
            }
          }
          if (result1 !== null) {
            result2 = "";
            if (result2 === null) {
              if (input.charCodeAt(pos) === 10) {
                result2 = "\n";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\n\"");
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {return ["",""];})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_char() {
        var result0;
        
        if (/^[A-z0-9*':?{()+|}\/.,\\\]["^\-$]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-z0-9*':?{()+|}\\/.,\\\\\\][\"^\\-$]");
          }
        }
        return result0;
      }
      
      function parse_capitalChar() {
        var result0;
        
        if (/^[A-Z]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Z]");
          }
        }
        return result0;
      }
      
      function parse_word() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result1 = parse_char();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_char();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, m1) {return m1.join('');})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_wordAndSeparator() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_word();
        if (result0 !== null) {
          result1 = parse_separator();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, m1, m2) {return m1+m2})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_resourceNameWord() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_capitalChar();
        if (result0 !== null) {
          if (/^[a-z]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[a-z]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[a-z]/.test(input.charAt(pos))) {
                result2 = input.charAt(pos);
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[a-z]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, m1, m2) {return m1+m2.join('');})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_resourceNameWordAndSeparator() {
        var result0, result1;
        var pos0, pos1;
        
        result0 = parse_comment();
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_resourceNameWord();
          if (result0 !== null) {
            result1 = parse_separator();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, m1, m2) {return m1+m2;})(pos0, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_defineName() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "A ") {
          result0 = "A ";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"A \"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 3) === "An ") {
            result0 = "An ";
            pos += 3;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"An \"");
            }
          }
        }
        if (result0 !== null) {
          result2 = parse_resourceNameWordAndSeparator();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_resourceNameWordAndSeparator();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            pos2 = pos;
            if (input.substr(pos, 3) === "is ") {
              result2 = "is ";
              pos += 3;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"is \"");
              }
            }
            if (result2 !== null) {
              result3 = parse_word();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos2 = pos;
              if (input.charCodeAt(pos) === 32) {
                result3 = " ";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\" \"");
                }
              }
              if (result3 !== null) {
                result4 = parse_comment();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 32) {
                  result4 = " ";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\" \"");
                  }
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse_defineHasProperty();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, m1, m2, m3) {return {name:m1.join(''),is:m2[1],property:m3};})(pos0, result0[1], result0[2], result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_hasName() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_word();
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse_space();
          if (result1 !== null) {
            if (input.substr(pos, 5) === "which") {
              result2 = "which";
              pos += 5;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"which\"");
              }
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 === null) {
            if (input.charCodeAt(pos) === 32) {
              result1 = " ";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\" \"");
              }
            }
            if (result1 === null) {
              result1 = "";
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, m1) {return m1;})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_hasNameString() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result1 = parse_hasName();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_hasName();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, m1) {var returnVal="";m1.forEach(function(e,i){if(i==m1.length-1){returnVal += e[0];}else{returnVal +=e[0]+e[1];}});return returnVal;})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_hasDes() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_comment();
        if (result0 === null) {
          pos1 = pos;
          result0 = parse_word();
          if (result0 !== null) {
            if (input.substr(pos, 4) === " and") {
              result1 = " and";
              pos += 4;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\" and\"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos) === 32) {
                result1 = " ";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\" \"");
                }
              }
              if (result1 === null) {
                result1 = "";
              }
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, m1) {return m1;})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_hasDesString() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result1 = parse_hasDes();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_hasDes();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, m1) {var returnVal="";m1.forEach(function(e,i){if(i==m1.length-1){returnVal += e[0];}else{returnVal +=e[0]+e[1];}});return returnVal;})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_spaceAndHasDesString() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_space();
        if (result0 !== null) {
          result1 = parse_hasDesString();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, m1, m2) {return m2;})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_hasDescrib() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3) === " is") {
          result0 = " is";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" is\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 4) === " has") {
            result0 = " has";
            pos += 4;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\" has\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 5) === " have") {
              result0 = " have";
              pos += 5;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\" have\"");
              }
            }
          }
        }
        if (result0 !== null) {
          if (input.substr(pos, 2) === " a") {
            result1 = " a";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\" a\"");
            }
          }
          if (result1 === null) {
            if (input.substr(pos, 3) === " an") {
              result1 = " an";
              pos += 3;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\" an\"");
              }
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result3 = parse_spaceAndHasDesString();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_spaceAndHasDesString();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, m1, m2) {var object={}; object[m1.replace(" ","")]=m2;return object;})(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_defineHas() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 4) === "has ") {
          result0 = "has ";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"has \"");
          }
        }
        if (result0 !== null) {
          if (input.substr(pos, 5) === "many ") {
            result1 = "many ";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"many \"");
            }
          }
          if (result1 === null) {
            if (input.substr(pos, 4) === "one ") {
              result1 = "one ";
              pos += 4;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"one \"");
              }
            }
            if (result1 === null) {
              if (input.substr(pos, 2) === "a ") {
                result1 = "a ";
                pos += 2;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"a \"");
                }
              }
              if (result1 === null) {
                if (input.substr(pos, 3) === "an ") {
                  result1 = "an ";
                  pos += 3;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"an \"");
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result2 = parse_hasNameString();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_hasDescrib();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_hasDescrib();
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, m1, m2, m3) {var object={'number':m1.replace(" ",""),'has a':m2}; m3.push(object);return m3;})(pos0, result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_canAuth() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "a ") {
          result0 = "a ";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"a \"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 3) === "an ") {
            result0 = "an ";
            pos += 3;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"an \"");
            }
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result2 = parse_canName();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_canName();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, m) {var returnString=""; m.forEach(function(e){returnString += e[0]+" "}); return returnString})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_canName() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        result0 = parse_comment();
        if (result0 === null) {
          pos1 = pos;
          result0 = parse_word();
          if (result0 !== null) {
            pos2 = pos;
            result1 = parse_space();
            if (result1 !== null) {
              if (input.substr(pos, 2) === "or") {
                result2 = "or";
                pos += 2;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"or\"");
                }
              }
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
            if (result1 === null) {
              result1 = parse_space();
              if (result1 === null) {
                result1 = "";
              }
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, m1) {return m1;})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_canNameString() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result1 = parse_canName();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_canName();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, m1) {var returnVal="";m1.forEach(function(e,i){if(i==m1.length-1){returnVal += e[0];}else{returnVal +=e[0]+e[1];}});return returnVal;})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_canOperation() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 32) {
          result0 = " ";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        if (result0 !== null) {
          result1 = parse_word();
          if (result1 !== null) {
            if (input.substr(pos, 3) === " or") {
              result2 = " or";
              pos += 3;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\" or\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          pos1 = pos;
          if (input.charCodeAt(pos) === 32) {
            result0 = " ";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\" \"");
            }
          }
          if (result0 !== null) {
            result1 = parse_word();
            if (result1 !== null) {
              if (input.substr(pos, 4) === " and") {
                result2 = " and";
                pos += 4;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\" and\"");
                }
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 === null) {
            pos1 = pos;
            if (input.charCodeAt(pos) === 32) {
              result0 = " ";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\" \"");
              }
            }
            if (result0 !== null) {
              result1 = parse_word();
              if (result1 !== null) {
                if (input.substr(pos, 4) === " by ") {
                  result2 = " by ";
                  pos += 4;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\" by \"");
                  }
                }
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, m) {return m[1];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_defineCan() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 6) === "can be") {
          result0 = "can be";
          pos += 6;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"can be\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_canOperation();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_canOperation();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            pos2 = pos;
            result4 = parse_canAuth();
            if (result4 !== null) {
              result3 = [];
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_canAuth();
              }
            } else {
              result3 = null;
            }
            if (result3 !== null) {
              if (input.charCodeAt(pos) === 32) {
                result4 = " ";
                pos++;
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\" \"");
                }
              }
              result4 = result4 !== null ? result4 : "";
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos2;
              }
            } else {
              result3 = null;
              pos = pos2;
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                pos2 = pos;
                result4 = parse_canAuth();
                if (result4 !== null) {
                  result3 = [];
                  while (result4 !== null) {
                    result3.push(result4);
                    result4 = parse_canAuth();
                  }
                } else {
                  result3 = null;
                }
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 32) {
                    result4 = " ";
                    pos++;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\" \"");
                    }
                  }
                  result4 = result4 !== null ? result4 : "";
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, m1, m2) {var returnArray=[]; m2.forEach(function(e){returnArray.push(e[0][0]);});return {operation:m1,auth:returnArray};})(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_hasPropertyName() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_comment();
        if (result0 === null) {
          pos1 = pos;
          result0 = parse_word();
          if (result0 !== null) {
            if (input.substr(pos, 4) === " and") {
              result1 = " and";
              pos += 4;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\" and\"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos) === 32) {
                result1 = " ";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\" \"");
                }
              }
              if (result1 === null) {
                result1 = "";
              }
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, m1) {return m1;})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_hasPropertyNameAndSpace() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result1 = parse_hasPropertyName();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_hasPropertyName();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, m1) {var returnVal=""; m1.forEach(function(e,i){if(i<m1.length-1){returnVal += e[0]+" ";}else{returnVal += e[0];}});return returnVal;})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_hasPropertyNameString() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 32) {
          result1 = " ";
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos, 2) === "a ") {
            result2 = "a ";
            pos += 2;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"a \"");
            }
          }
          if (result2 === null) {
            if (input.substr(pos, 3) === "an ") {
              result2 = "an ";
              pos += 3;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"an \"");
              }
            }
          }
          result2 = result2 !== null ? result2 : "";
          if (result2 !== null) {
            result3 = parse_hasPropertyNameAndSpace();
            if (result3 !== null) {
              result1 = [result1, result2, result3];
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
        } else {
          result1 = null;
          pos = pos1;
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            pos1 = pos;
            if (input.charCodeAt(pos) === 32) {
              result1 = " ";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\" \"");
              }
            }
            if (result1 !== null) {
              if (input.substr(pos, 2) === "a ") {
                result2 = "a ";
                pos += 2;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"a \"");
                }
              }
              if (result2 === null) {
                if (input.substr(pos, 3) === "an ") {
                  result2 = "an ";
                  pos += 3;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"an \"");
                  }
                }
              }
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result3 = parse_hasPropertyNameAndSpace();
                if (result3 !== null) {
                  result1 = [result1, result2, result3];
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, m1) {var returnVal=[]; m1.forEach(function(e){returnVal.push(e[2]);}); return returnVal;})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_defineHasProperty() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 19) === "has properties from") {
          result0 = "has properties from";
          pos += 19;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"has properties from\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_hasPropertyNameString();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, m1) {return {property:m1}})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_defineBelong() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 11) === "belongs to ") {
          result0 = "belongs to ";
          pos += 11;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"belongs to \"");
          }
        }
        if (result0 !== null) {
          if (input.substr(pos, 2) === "a ") {
            result1 = "a ";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"a \"");
            }
          }
          if (result1 === null) {
            if (input.substr(pos, 3) === "an ") {
              result1 = "an ";
              pos += 3;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"an \"");
              }
            }
          }
          if (result1 !== null) {
            result2 = parse_resourceNameWordAndSeparator();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, m1) {return {'belongs':m1};})(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  